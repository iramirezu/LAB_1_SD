// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatCliente

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServicioClienteClient is the client API for ServicioCliente service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicioClienteClient interface {
	GenerarOrden(ctx context.Context, in *OrdenGenerada, opts ...grpc.CallOption) (*IdSeguimiento, error)
	ConsultarOrden(ctx context.Context, in *IdSeguimiento, opts ...grpc.CallOption) (*MensajeReply, error)
}

type servicioClienteClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioClienteClient(cc grpc.ClientConnInterface) ServicioClienteClient {
	return &servicioClienteClient{cc}
}

func (c *servicioClienteClient) GenerarOrden(ctx context.Context, in *OrdenGenerada, opts ...grpc.CallOption) (*IdSeguimiento, error) {
	out := new(IdSeguimiento)
	err := c.cc.Invoke(ctx, "/chatCliente.ServicioCliente/GenerarOrden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicioClienteClient) ConsultarOrden(ctx context.Context, in *IdSeguimiento, opts ...grpc.CallOption) (*MensajeReply, error) {
	out := new(MensajeReply)
	err := c.cc.Invoke(ctx, "/chatCliente.ServicioCliente/ConsultarOrden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicioClienteServer is the server API for ServicioCliente service.
// All implementations should embed UnimplementedServicioClienteServer
// for forward compatibility
type ServicioClienteServer interface {
	GenerarOrden(context.Context, *OrdenGenerada) (*IdSeguimiento, error)
	ConsultarOrden(context.Context, *IdSeguimiento) (*MensajeReply, error)
}

// UnimplementedServicioClienteServer should be embedded to have forward compatible implementations.
type UnimplementedServicioClienteServer struct {
}

func (UnimplementedServicioClienteServer) GenerarOrden(context.Context, *OrdenGenerada) (*IdSeguimiento, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerarOrden not implemented")
}
func (UnimplementedServicioClienteServer) ConsultarOrden(context.Context, *IdSeguimiento) (*MensajeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarOrden not implemented")
}

// UnsafeServicioClienteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioClienteServer will
// result in compilation errors.
type UnsafeServicioClienteServer interface {
	mustEmbedUnimplementedServicioClienteServer()
}

func RegisterServicioClienteServer(s *grpc.Server, srv ServicioClienteServer) {
	s.RegisterService(&_ServicioCliente_serviceDesc, srv)
}

func _ServicioCliente_GenerarOrden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdenGenerada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioClienteServer).GenerarOrden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatCliente.ServicioCliente/GenerarOrden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioClienteServer).GenerarOrden(ctx, req.(*OrdenGenerada))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicioCliente_ConsultarOrden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdSeguimiento)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioClienteServer).ConsultarOrden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatCliente.ServicioCliente/ConsultarOrden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioClienteServer).ConsultarOrden(ctx, req.(*IdSeguimiento))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServicioCliente_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatCliente.ServicioCliente",
	HandlerType: (*ServicioClienteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerarOrden",
			Handler:    _ServicioCliente_GenerarOrden_Handler,
		},
		{
			MethodName: "ConsultarOrden",
			Handler:    _ServicioCliente_ConsultarOrden_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatCliente/chatCliente.proto",
}
