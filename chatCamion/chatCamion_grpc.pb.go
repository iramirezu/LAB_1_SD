// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chatCamion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServicioCamionClient is the client API for ServicioCamion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicioCamionClient interface {
	FuncHolaMUndo(ctx context.Context, in *MensajeRequest, opts ...grpc.CallOption) (*MensajeReply, error)
}

type servicioCamionClient struct {
	cc grpc.ClientConnInterface
}

func NewServicioCamionClient(cc grpc.ClientConnInterface) ServicioCamionClient {
	return &servicioCamionClient{cc}
}

func (c *servicioCamionClient) FuncHolaMUndo(ctx context.Context, in *MensajeRequest, opts ...grpc.CallOption) (*MensajeReply, error) {
	out := new(MensajeReply)
	err := c.cc.Invoke(ctx, "/chatCamion.ServicioCamion/FuncHolaMUndo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicioCamionServer is the server API for ServicioCamion service.
// All implementations must embed UnimplementedServicioCamionServer
// for forward compatibility
type ServicioCamionServer interface {
	FuncHolaMUndo(context.Context, *MensajeRequest) (*MensajeReply, error)
	mustEmbedUnimplementedServicioCamionServer()
}

// UnimplementedServicioCamionServer must be embedded to have forward compatible implementations.
type UnimplementedServicioCamionServer struct {
}

func (UnimplementedServicioCamionServer) FuncHolaMUndo(context.Context, *MensajeRequest) (*MensajeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FuncHolaMUndo not implemented")
}
func (UnimplementedServicioCamionServer) mustEmbedUnimplementedServicioCamionServer() {}

// UnsafeServicioCamionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicioCamionServer will
// result in compilation errors.
type UnsafeServicioCamionServer interface {
	mustEmbedUnimplementedServicioCamionServer()
}

func RegisterServicioCamionServer(s *grpc.Server, srv ServicioCamionServer) {
	s.RegisterService(&_ServicioCamion_serviceDesc, srv)
}

func _ServicioCamion_FuncHolaMUndo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicioCamionServer).FuncHolaMUndo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatCamion.ServicioCamion/FuncHolaMUndo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicioCamionServer).FuncHolaMUndo(ctx, req.(*MensajeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServicioCamion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatCamion.ServicioCamion",
	HandlerType: (*ServicioCamionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FuncHolaMUndo",
			Handler:    _ServicioCamion_FuncHolaMUndo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chatCamion.proto",
}
